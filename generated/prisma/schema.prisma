generator client {
  provider = "prisma-client-js"
  output   = "../generated/prisma"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum userRole {
  admin
  psychologist
  user
}

// enum questionType {
//   single_choice
//   multiple_choice
//   likert
//   open_text
//   numeric
// }

enum assignmentStatus {
  assigned
  in_progress
  completed
  cancelled
}

model user {
  userId       String   @id @default(uuid()) @db.Uuid
  userNumber   String   @unique
  email        String   @unique
  password     String
  name         String
  gender       String
  tokenVersion Int      @default(0)
  role         userRole
  isActive     Boolean  @default(false)
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt

  // relations
  refreshTokens refreshToken[]
  createdTests  test[]         @relation("testCreatedBy")
  assignmentsTo assignment[]   @relation("assignedTo")
  assignmentsBy assignment[]   @relation("assignedBy")

  @@map("user")
}

model test {
  testId          String   @id @default(uuid()) @db.Uuid
  testCode        String?  @unique
  title           String
  description     String?
  isPublished     Boolean  @default(false)
  createdByNumber String?
  createdBy       user?    @relation("testCreatedBy", fields: [createdByNumber], references: [userNumber])
  createdAt       DateTime @default(now())

  sections    testSection[]
  questions   question[]
  assignments assignment[]

  @@map("tests")
}

model testSection {
  testSectionId   String  @id @default(uuid()) @db.Uuid
  testSectionCode String?
  testCode        String
  name            String?

  test      test       @relation(fields: [testCode], references: [testCode], onDelete: Cascade)
  questions question[]

  @@map("testSections")
}

model question {
  questionId    String  @id @default(uuid()) @db.Uuid
  testCode      String
  testSectionId String? @db.Uuid
  //type questionType
  code          String?
  prompt        String
  required      Boolean @default(true)
  metadata      Json?

  section        testSection?     @relation(fields: [testSectionId], references: [testSectionId])
  test           test             @relation(fields: [testCode], references: [testCode], onDelete: Cascade)
  questionOption questionOption[]
  answers        answer[]

  @@unique([testCode, code])
  @@map("questions")
}

model questionOption {
  questionOptionId String @id @default(uuid()) @db.Uuid
  questionId       String @db.Uuid

  label      String
  value      String?
  scoreValue Decimal? @db.Decimal(10, 2)

  question question @relation(fields: [questionId], references: [questionId], onDelete: Cascade)
  answers  answer[]

  @@map("questionsOptions")
}

model assignment {
  assignmentId String @id @default(uuid()) @db.Uuid
  testCode     String

  assignedToId String
  assignedById String
  status       assignmentStatus @default(assigned)

  dueAt       DateTime?
  startedAt   DateTime?
  completedAt DateTime?
  createdAt   DateTime  @default(now())

  assignedBy user             @relation("assignedBy", fields: [assignedById], references: [userNumber])
  assignedTo user             @relation("assignedTo", fields: [assignedToId], references: [userNumber])
  test       test             @relation(fields: [testCode], references: [testCode], onDelete: Cascade, onUpdate: Cascade)
  answers    answer[]
  score      assignmentScore?

  @@index([assignedToId, status])
  @@map("assignments")
}

model answer {
  answerId         String   @id @default(uuid()) @db.Uuid
  assignmentId     String   @db.Uuid
  questionId       String   @db.Uuid
  questionOptionId String?  @db.Uuid
  numericAnswer    Decimal? @db.Decimal(12, 4)
  score            Decimal? @db.Decimal(12, 4)

  question   question        @relation(fields: [questionId], references: [questionId])
  option     questionOption? @relation(fields: [questionOptionId], references: [questionOptionId])
  assignment assignment      @relation(fields: [assignmentId], references: [assignmentId], onDelete: Cascade)

  @@unique([assignmentId, questionId])
  @@map("answers")
}

model assignmentScore {
  assignmentId String     @id @db.Uuid
  assignment   assignment @relation(fields: [assignmentId], references: [assignmentId], onDelete: Cascade)

  totalScore     Decimal  @db.Decimal(12, 4)
  percentile     Decimal? @db.Decimal(6, 3)
  interpretation String?
  details        Json?

  @@map("assignment_scores")
}

model refreshToken {
  refreshTokenId String    @id @default(uuid()) @db.Uuid
  jti            String    @unique
  userId         String    @db.Uuid
  user           user      @relation(fields: [userId], references: [userId], onDelete: Cascade)
  revokedAt      DateTime?
  expiresAt      DateTime
  createdAt      DateTime  @default(now())
  userAgent      String?
  ip             String?

  @@index([userId, revokedAt])
}
